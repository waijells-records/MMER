# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–µ–ª–µ—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–∏–∏ "–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ"
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot v20+, asyncio, –∏ json-—Ñ–∞–π–ª –∫–∞–∫ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"

import asyncio
import json
import os
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaVideo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
BOOKINGS_FILE = "bookings.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—É—Ç–µ–π
BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"
VIDEO_PATH = "intro.mp4"

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
ADMIN_CHAT_ID = "@merecords29"
NOTIFY_CHAT_ID = "@OLegKozhevin"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def load_bookings():
    if os.path.exists(BOOKINGS_FILE):
        with open(BOOKINGS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_bookings(data):
    with open(BOOKINGS_FILE, "w") as f:
        json.dump(data, f, indent=2)

def generate_slots(date, is_stan_blizhe=False):
    start = 10
    end = 22
    slots = []
    delta = timedelta(minutes=90 if is_stan_blizhe else 60)
    pause = timedelta(minutes=30 if is_stan_blizhe else 0)
    now = datetime.combine(date, datetime.min.time()).replace(hour=start)
    while now.hour < end:
        slot = now.strftime("%H:%M")
        slots.append(slot)
        now += delta + pause
    return slots

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ: —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏, —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º—É–∑—ã–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Å–µ—Ä–¥—Ü–∞!\n\n"
        "–ú–µ—á—Ç–∞–µ—Ç–µ –æ –∫—Ä–µ–ø–∫–æ–π —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º —Ä–µ–±–µ–Ω–∫–æ–º, –∞ –æ–Ω —Å–∏–¥–∏—Ç –≤ –≥–∞–¥–∂–µ—Ç–∞—Ö? –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ, —á—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å?\n\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –∏ –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—É–¥–∏–∏, –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø–µ—Å–Ω—é –∏ —Å–Ω–∏–º–∞–µ—Ç–µ –∫–ª–∏–ø! –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫—Ä–µ–ø–∏—Ç –≤–∞—à—É —Å–≤—è–∑—å."
    )
    if os.path.exists(VIDEO_PATH):
        await update.message.reply_video(video=open(VIDEO_PATH, 'rb'))

    keyboard = [[InlineKeyboardButton("üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="book")],
                [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "contact":
        await query.edit_message_text(
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–∏–µ–π:\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (963) 200-45-36\n"
            "Telegram: @merecords29"
        )

    elif data == "buy":
        await query.edit_message_text(
            "–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é.\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @merecords29\n\n"
            "(–í –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Pay)"
        )

    elif data == "book":
        # –ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Å—É–±–±–æ—Ç—É (–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ)
        today = datetime.now()
        next_saturday = today + timedelta((5 - today.weekday()) % 7)
        slots = generate_slots(next_saturday.date(), is_stan_blizhe=True)
        bookings = load_bookings().get(next_saturday.strftime("%Y-%m-%d"), [])

        keyboard = []
        for slot in slots:
            if slot in bookings:
                keyboard.append([InlineKeyboardButton(f"‚ùå {slot} (–∑–∞–Ω—è—Ç–æ)", callback_data="none")])
            else:
                keyboard.append([InlineKeyboardButton(f"üü¢ {slot}", callback_data=f"book_{slot}")])

        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {next_saturday.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("book_"):
        slot = data.split("_")[1]
        today = datetime.now()
        next_saturday = today + timedelta((5 - today.weekday()) % 7)
        date_str = next_saturday.strftime("%Y-%m-%d")

        bookings = load_bookings()
        booked_slots = bookings.get(date_str, [])
        if slot in booked_slots:
            await query.edit_message_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
            return
        booked_slots.append(slot)
        bookings[date_str] = booked_slots
        save_bookings(bookings)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {slot} –≤ —Å—É–±–±–æ—Ç—É")
        await context.bot.send_message(chat_id=NOTIFY_CHAT_ID, text=f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {slot} –≤ —Å—É–±–±–æ—Ç—É")

        await query.edit_message_text(f"‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –≤—Ä–µ–º—è {slot} –Ω–∞ {next_saturday.strftime('%d.%m.%Y')}. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç—É–¥–∏–∏!")

# –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –∫–Ω–æ–ø–∫—É
async def ignore(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(CallbackQueryHandler(ignore, pattern="^none$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
