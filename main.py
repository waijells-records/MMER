import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import requests
import uuid

BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
YOOKASSA_SHOP_ID = "–í–ê–®_SHOP_ID"
YOOKASSA_SECRET_KEY = "–í–ê–®_SECRET_KEY"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üé¨ –°—Ç–∞–Ω—å –ë–ª–∏–∂–µ", callback_data="intro"),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
        InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/merecords29")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç ¬´–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ¬ª!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å –ø–µ—Å–Ω—é –∏ –∫–ª–∏–ø —Å –±–ª–∏–∑–∫–∏–º–∏ –≤ —Å—Ç—É–¥–∏–∏ ‚ù§Ô∏è",
        reply_markup=main_menu()
    )

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∏–Ω—Ç—Ä–æ + –≤–∏–¥–µ–æ
@dp.callback_query_handler(lambda c: c.data == "intro")
async def show_intro(callback_query: types.CallbackQuery):
    await bot.send_video(callback_query.from_user.id, open("–∏–Ω—Ç—Ä–æ.mp4", "rb"))
    await bot.send_message(callback_query.from_user.id,
        "üé¨ *–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ*: —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏, —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º—É–∑—ã–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Å–µ—Ä–¥—Ü–∞!\n\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –∏ –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –≤ —Å—Ç—É–¥–∏–∏ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ø–µ—Å–Ω—é –∏ –∫–ª–∏–ø. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ, —ç—Ç–æ –ø–∞–º—è—Ç—å –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
def create_payment_link(amount=12000):
    payment_id = str(uuid.uuid4())
    headers = {
        "Authorization": f"Basic {YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "amount": {
            "value": f"{amount}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/merecords29"
        },
        "description": "–û–ø–ª–∞—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ ¬´–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ¬ª",
        "capture": True,
        "metadata": {"order_id": payment_id}
    }
    response = requests.post(
        "https://api.yookassa.ru/v3/payments",
        json=data,
        auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
    )
    result = response.json()
    return result.get("confirmation", {}).get("confirmation_url", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")

# –û–ø–ª–∞—Ç–∞
@dp.callback_query_handler(lambda c: c.data == "pay")
async def handle_payment(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    payment_url = create_payment_link()
    await bot.send_message(callback_query.from_user.id, 
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã:\n\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({payment_url})",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
