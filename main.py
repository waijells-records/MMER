from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import json
import logging

API_TOKEN = '7943659464:AAF-M_FGdzG57jFQf8tnD2eAzozTPC0aT7Q'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

with open("services_full.json", encoding='utf-8') as f:
    SERVICES = json.load(f)

main_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üé¨ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="book_time"),
    InlineKeyboardButton("üìû –°–≤—è–∑—å", callback_data="contact"),
    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"),
    InlineKeyboardButton("üõ† –£—Å–ª—É–≥–∏", callback_data="services")
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    intro_text = (
        "üé¨–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ: —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏, —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º—É–∑—ã–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Å–µ—Ä–¥—Ü–∞!\n\n"
        "–ú–µ—á—Ç–∞–µ—Ç–µ –æ –∫—Ä–µ–ø–∫–æ–π —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º —Ä–µ–±–µ–Ω–∫–æ–º, –∞ –æ–Ω —Å–∏–¥–∏—Ç –≤ –≥–∞–¥–∂–µ—Ç–∞—Ö? –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ, —á—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å?\n\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –∏ –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑–≤—É–∫–æ–∑–∞–ø–∏—Å—ã–≤–∞—é—â–µ–π —Å—Ç—É–¥–∏–∏, –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø–µ—Å–Ω—é –∏ —Å–Ω–∏–º–∞–µ—Ç–µ –∫–ª–∏–ø! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ, —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫—Ä–µ–ø–∏—Ç –≤–∞—à—É —Å–≤—è–∑—å –∏ –ø–æ–¥–∞—Ä–∏—Ç –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π.\n\n"
        "–ü—Ä–æ–µ–∫—Ç \"–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ\" –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n"
        "‚Ä¢ –†–æ–¥–∏—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–µ–π-–ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤: –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –ø–µ—Å–Ω—é –∏ —Å–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π —à–µ–¥–µ–≤—Ä.\n"
        "‚Ä¢ –°—É–ø—Ä—É–∂–µ—Å–∫–∏—Ö –ø–∞—Ä: –ü–æ–¥–∞—Ä–∏—Ç–µ –ø–µ—Å–Ω—é, –æ—Ç—Ä–∞–∂–∞—é—â—É—é –≤–∞—à—É –ª—é–±–æ–≤—å –∏ –∏—Å—Ç–æ—Ä–∏—é.\n"
        "‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: –ü–µ—Å–Ω—è –æ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ ‚Äî —è—Ä–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
        "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ ‚ù§Ô∏è –¢—ë–ø–ª—ã–µ —ç–º–æ—Ü–∏–∏ –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ\n"
        "‚Ä¢ üéß –ü—Ä–æ—Ñ. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∑–≤—É–∫\n"
        "‚Ä¢ üéâ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º\n"
        "‚Ä¢ üé¨ –ù–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∏–ø –Ω–∞ –ø–∞–º—è—Ç—å\n\n"
        "–ü—Ä–æ–µ–∫—Ç \"–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ\" –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:\n"
        "‚Ä¢ 1 —á–∞—Å —Å—Ç—É–¥–∏–∏\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—å –ø–µ—Å–Ω–∏\n"
        "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∏–ø\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 12 000 ‚ÇΩ\n\n"
        "–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è?\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    try:
        with open("intro.mp4", "rb") as video:
            await bot.send_video(message.chat.id, video, caption=intro_text, reply_markup=main_kb)
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ intro.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å main.py.", reply_markup=main_kb)

@dp.callback_query_handler(lambda c: c.data == 'book_time')
async def process_booking(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

@dp.callback_query_handler(lambda c: c.data == 'contact')
async def process_contact(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n+7 (963) 200-45-36\nTelegram: @merecords29")

@dp.callback_query_handler(lambda c: c.data == 'payment')
async def process_payment(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: 12 000‚ÇΩ\n\nüîπ QR-–∫–æ–¥ –æ–ø–ª–∞—Ç—ã ‚Äì —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è\nüîπ –°—á—ë—Ç –ò–ü ‚Äì —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è")

@dp.callback_query_handler(lambda c: c.data == 'services')
async def process_services(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    kb = InlineKeyboardMarkup(row_width=1)
    for key in SERVICES.keys():
        kb.add(InlineKeyboardButton(key, callback_data=f'service_{key}'))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('service_'))
async def process_service_detail(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    key = callback_query.data[len('service_'):]
    info = SERVICES.get(key, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    kb = InlineKeyboardMarkup(row_width=2)
    if key in ["–ó–ê–ü–ò–°–¨ –ê–£–î–ò–û–°–ö–ê–ó–ö–ò", "–ó–ê–ü–ò–°–¨ –í–û–ö–ê–õ–ê", "–ó–ê–ü–ò–°–¨ –ü–û–î–ö–ê–°–¢–ê"]:
        kb.add(InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="book_time"))
    kb.add(
        InlineKeyboardButton("–°–≤—è–∑—å", callback_data="contact"),
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∞", callback_data="payment"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="services")
    )
    await bot.send_message(callback_query.from_user.id, info, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'back_to_main')
async def back_to_main(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
