import asyncio
import json
import os
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaVideo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOOKINGS_FILE = "bookings.json"
SERVICES_FILE = "services_full.json"
BOT_TOKEN = "7943659464:AAF-M_FGdzG57jFQf8tnD2eAzozTPC0aT7Q"
VIDEO_PATH = "intro.mp4"

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
ADMIN_CHAT_ID = "@merecords29"
NOTIFY_CHAT_ID = "@OLegKozhevin"

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥
def load_services():
    with open(SERVICES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def load_bookings():
    if os.path.exists(BOOKINGS_FILE):
        with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_bookings(data):
    with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def generate_slots(date, is_stan_blizhe=False):
    start = 10
    end = 22
    slots = []
    delta = timedelta(minutes=90 if is_stan_blizhe else 60)
    pause = timedelta(minutes=30 if is_stan_blizhe else 0)
    now = datetime.combine(date, datetime.min.time()).replace(hour=start)
    while now.hour < end:
        slot = now.strftime("%H:%M")
        slots.append(slot)
        now += delta + pause
    return slots

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé¨ –°—Ç–∞–Ω—å –ë–ª–∏–∂–µ: —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏, —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º—É–∑—ã–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Å–µ—Ä–¥—Ü–∞!\n\n"
        "–ú–µ—á—Ç–∞–µ—Ç–µ –æ –∫—Ä–µ–ø–∫–æ–π —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º —Ä–µ–±—ë–Ω–∫–æ–º, –∞ –æ–Ω —Å–∏–¥–∏—Ç –≤ –≥–∞–¥–∂–µ—Ç–∞—Ö? –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ, —á—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å?\n\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –∏ –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑–≤—É–∫–æ–∑–∞–ø–∏—Å—ã–≤–∞—é—â–µ–π —Å—Ç—É–¥–∏–∏, –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–µ—Ç–µ –ø–µ—Å–Ω—é –∏ —Å–Ω–∏–º–∞–µ—Ç–µ –∫–ª–∏–ø! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ, —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫—Ä–µ–ø–∏—Ç –≤–∞—à—É —Å–≤—è–∑—å –∏ –ø–æ–¥–∞—Ä–∏—Ç –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π."
    )
    if os.path.exists(VIDEO_PATH):
        await update.message.reply_video(video=open(VIDEO_PATH, 'rb'))

    await update.message.reply_text(
        "–ü—Ä–æ–µ–∫—Ç '–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ' –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n"
        "‚Ä¢ üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–µ–π-–ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤\n"
        "‚Ä¢ üíë –ü–∞—Ä\n"
        "‚Ä¢ üë• –ö–æ–ª–ª–µ–∫—Ç–∏–≤–æ–≤\n\n"
        "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ ‚ù§Ô∏è –î—É—à–µ–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞\n"
        "‚Ä¢ üéß –ü—Ä–æ—Ñ. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ üéâ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ üé¨ –ö–ª–∏–ø –≤ –ø–æ–¥–∞—Ä–æ–∫"
    )
    keyboard = [
        [InlineKeyboardButton("üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="book")],
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")],
        [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏", callback_data="services")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    services = load_services()

    if data == "contact":
        await query.edit_message_text("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–∏–µ–π:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (963) 200-45-36\nTelegram: @merecords29")

    elif data == "buy":
        await query.edit_message_text(
            "üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):\n\n"
            "‚Ä¢ QR-–∫–æ–¥ —Å—á–µ—Ç–∞ –ò–ü ‚Äî *—Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è*\n"
            "‚Ä¢ –°—á–µ—Ç –ò–ü –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî *—Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è*\n\n"
            "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–º –≤ Telegram: @merecords29"
        )

    elif data == "book":
        today = datetime.now()
        next_saturday = today + timedelta((5 - today.weekday()) % 7)
        slots = generate_slots(next_saturday.date(), is_stan_blizhe=True)
        bookings = load_bookings().get(next_saturday.strftime("%Y-%m-%d"), [])
        keyboard = []
        for slot in slots:
            if slot in bookings:
                keyboard.append([InlineKeyboardButton(f"‚ùå {slot} (–∑–∞–Ω—è—Ç–æ)", callback_data="none")])
            else:
                keyboard.append([InlineKeyboardButton(f"üü¢ {slot}", callback_data=f"book_{slot}")])
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {next_saturday.strftime('%d.%m.%Y')}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("book_"):
        slot = data.split("_")[1]
        today = datetime.now()
        next_saturday = today + timedelta((5 - today.weekday()) % 7)
        date_str = next_saturday.strftime("%Y-%m-%d")

        bookings = load_bookings()
        booked_slots = bookings.get(date_str, [])
        if slot in booked_slots:
            await query.edit_message_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
            return
        booked_slots.append(slot)
        bookings[date_str] = booked_slots
        save_bookings(bookings)

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {slot} –≤ —Å—É–±–±–æ—Ç—É")
        await context.bot.send_message(chat_id=NOTIFY_CHAT_ID, text=f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {slot} –≤ —Å—É–±–±–æ—Ç—É")
        await query.edit_message_text(f"‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ {slot} –Ω–∞ {next_saturday.strftime('%d.%m.%Y')}.")

    elif data == "services":
        keyboard = [
            [InlineKeyboardButton(service["name"], callback_data=f"srv_{i}")]
            for i, service in enumerate(services)
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("srv_"):
        index = int(data.split("_")[1])
        if 0 <= index < len(services):
            info = services[index]["description"]
            await query.edit_message_text(info)
        else:
            await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    elif data == "none":
        await query.answer()

if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
