import asyncio
import json
import os
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaVideo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
BOOKINGS_FILE = "bookings.json"

# üí¨ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞–ø—Ä—è–º—É—é)
BOT_TOKEN = "7943659464:AAF-M_FGdzG57jFQf8tnD2eAzozTPC0aT7Q"
VIDEO_PATH = "intro.mp4"

# –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_CHAT_ID = "@merecords29"
NOTIFY_CHAT_ID = "@OLegKozhevin"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def load_bookings():
    if os.path.exists(BOOKINGS_FILE):
        with open(BOOKINGS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_bookings(data):
    with open(BOOKINGS_FILE, "w") as f:
        json.dump(data, f, indent=2)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ ---
def generate_slots(date, is_stan_blizhe=False):
    start = 10
    end = 22
    slots = []
    delta = timedelta(minutes=90 if is_stan_blizhe else 60)
    pause = timedelta(minutes=30 if is_stan_blizhe else 0)
    now = datetime.combine(date, datetime.min.time()).replace(hour=start)
    while now.hour < end:
        slot = now.strftime("%H:%M")
        slots.append(slot)
        now += delta + pause
    return slots

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé¨ –°—Ç–∞–Ω—å –ë–ª–∏–∂–µ: —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏, —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º—É–∑—ã–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Å–µ—Ä–¥—Ü–∞!\n\n"
        "–ú–µ—á—Ç–∞–µ—Ç–µ –æ –∫—Ä–µ–ø–∫–æ–π —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º —Ä–µ–±—ë–Ω–∫–æ–º, –∞ –æ–Ω —Å–∏–¥–∏—Ç –≤ –≥–∞–¥–∂–µ—Ç–∞—Ö?\n"
        "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ, —á—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å?\n\n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –∏ –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—É–¥–∏–∏, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ø–µ—Å–Ω—é, –∞ –ø–æ—Ç–æ–º —Å–Ω–∏–º–∞–µ—Ç–µ –∫–ª–∏–ø! "
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –æ–ø—ã—Ç."
    )

    if os.path.exists(VIDEO_PATH):
        await update.message.reply_video(video=open(VIDEO_PATH, 'rb'))

    await update.message.reply_text(
        "–ü—Ä–æ–µ–∫—Ç ¬´–°—Ç–∞–Ω—å –ë–ª–∏–∂–µ¬ª –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è:\n"
        "‚Ä¢ üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–µ–π\n"
        "‚Ä¢ üíë –ü–∞—Ä\n"
        "‚Ä¢ üë• –ö–æ–ª–ª–µ–∫—Ç–∏–≤–æ–≤"
    )
    await update.message.reply_text(
        "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ ‚ù§Ô∏è –ù–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏\n"
        "‚Ä¢ üéß –ü—Ä–æ—Ñ. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ üéâ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ üé¨ –ö–ª–∏–ø –Ω–∞ –ø–∞–º—è—Ç—å"
    )

    keyboard = [
        [InlineKeyboardButton("üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")],
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")],
        [InlineKeyboardButton("üéµ –£—Å–ª—É–≥–∏ —Å—Ç—É–¥–∏–∏", callback_data="services")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "contact":
        await query.edit_message_text("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–∏–µ–π:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (963) 200-45-36\nTelegram: @merecords29")

    elif data == "buy":
        await query.edit_message_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @merecords29.\n"
            "–ü–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è Telegram Pay.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
            "1. –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n"
            "2. –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Pay\n"
            "3. QR-–∫–æ–¥"
        )

    elif data == "book":
        today = datetime.now()
        next_saturday = today + timedelta((5 - today.weekday()) % 7)
        slots = generate_slots(next_saturday.date(), is_stan_blizhe=True)
        bookings = load_bookings().get(next_saturday.strftime("%Y-%m-%d"), [])

        keyboard = []
        for slot in slots:
            if slot in bookings:
                keyboard.append([InlineKeyboardButton(f"‚ùå {slot} (–∑–∞–Ω—è—Ç–æ)", callback_data="none")])
            else:
                keyboard.append([InlineKeyboardButton(f"üü¢ {slot}", callback_data=f"book_{slot}")])

        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {next_saturday.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("book_"):
        slot = data.split("_")[1]
        today = datetime.now()
        next_saturday = today + timedelta((5 - today.weekday()) % 7)
        date_str = next_saturday.strftime("%Y-%m-%d")

        bookings = load_bookings()
        booked_slots = bookings.get(date_str, [])
        if slot in booked_slots:
            await query.edit_message_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
            return
        booked_slots.append(slot)
        bookings[date_str] = booked_slots
        save_bookings(bookings)

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üîî –ë—Ä–æ–Ω—å: {slot} –≤ —Å—É–±–±–æ—Ç—É")
        await context.bot.send_message(chat_id=NOTIFY_CHAT_ID, text=f"üîî –ë—Ä–æ–Ω—å: {slot} –≤ —Å—É–±–±–æ—Ç—É")
        await query.edit_message_text(f"‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ {slot} –Ω–∞ {next_saturday.strftime('%d.%m.%Y')}.")

    elif data == "services":
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –ê—É–¥–∏–æ—Å–∫–∞–∑–∫–∞", callback_data="service_1")],
            [InlineKeyboardButton("2Ô∏è‚É£ –ó–∞–ø–∏—Å—å –≤–æ–∫–∞–ª–∞", callback_data="service_2")],
            [InlineKeyboardButton("3Ô∏è‚É£ –°–≤–µ–¥–µ–Ω–∏–µ", callback_data="service_3")],
            [InlineKeyboardButton("4Ô∏è‚É£ –î–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è", callback_data="service_4")],
            [InlineKeyboardButton("5Ô∏è‚É£ –ü–µ—Å–Ω—è –ø–æ–¥ –∫–ª—é—á", callback_data="service_5")],
            [InlineKeyboardButton("6Ô∏è‚É£ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="service_6")],
            [InlineKeyboardButton("7Ô∏è‚É£ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª", callback_data="service_7")],
            [InlineKeyboardButton("8Ô∏è‚É£ –û–±–ª–æ–∂–∫–∞/–°—Ç–æ—Ä–∏—Å", callback_data="service_8")],
            [InlineKeyboardButton("9Ô∏è‚É£ –ö–ª–∏–ø", callback_data="service_9")],
            [InlineKeyboardButton("üîü –û–∑–≤—É—á–∫–∞", callback_data="service_10")],
            [InlineKeyboardButton("1Ô∏è‚É£1Ô∏è‚É£ –ü–æ–¥–∫–∞—Å—Ç", callback_data="service_11")],
            [InlineKeyboardButton("1Ô∏è‚É£2Ô∏è‚É£ –û—Ü–∏—Ñ—Ä–æ–≤–∫–∞", callback_data="service_12")],
            [InlineKeyboardButton("1Ô∏è‚É£3Ô∏è‚É£ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", callback_data="service_13")],
            [InlineKeyboardButton("1Ô∏è‚É£4Ô∏è‚É£ –ó–≤—É–∫ –Ω–∞ —Å—ä—ë–º–∫–µ", callback_data="service_14")],
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("service_"):
        idx = int(data.split("_")[1])
        with open("services.json", "r", encoding="utf-8") as f:
            all_services = json.load(f)
        info = all_services.get(str(idx), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        keyboard = [
            [InlineKeyboardButton("üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")],
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="services")]
        ]
        await query.edit_message_text(info, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "none":
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
