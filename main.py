from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import json
import logging

API_TOKEN = '7943659464:AAF-M_FGdzG57jFQf8tnD2eAzozTPC0aT7Q'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

with open("services_full.json", encoding='utf-8') as f:
    SERVICES = json.load(f)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üé¨ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="book_time"),
    InlineKeyboardButton("üìû –°–≤—è–∑—å", callback_data="contact"),
    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"),
    InlineKeyboardButton("üõ† –£—Å–ª—É–≥–∏", callback_data="services")
)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("üé¨ –°—Ç–∞–Ω—å –ë–ª–∏–∂–µ: —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏, —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º—É–∑—ã–∫–∞!", reply_markup=main_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'book_time')
async def process_booking(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

@dp.callback_query_handler(lambda c: c.data == 'contact')
async def process_contact(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 (963) 200-45-36 –∏–ª–∏ Telegram: @merecords29")

@dp.callback_query_handler(lambda c: c.data == 'payment')
async def process_payment(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: 12 000‚ÇΩ\n\nüîπ QR-–∫–æ–¥ –æ–ø–ª–∞—Ç—ã ‚Äì —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è\nüîπ –°—á—ë—Ç –ò–ü ‚Äì —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è")

@dp.callback_query_handler(lambda c: c.data == 'services')
async def process_services(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    kb = InlineKeyboardMarkup(row_width=1)
    for key in SERVICES.keys():
        kb.add(InlineKeyboardButton(key, callback_data=f'service_{key}'))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('service_'))
async def process_service_detail(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    key = callback_query.data[len('service_'):]
    info = SERVICES.get(key, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    kb = InlineKeyboardMarkup(row_width=2)
    if key in ["–ó–ê–ü–ò–°–¨ –ê–£–î–ò–û–°–ö–ê–ó–ö–ò", "–ó–ê–ü–ò–°–¨ –í–û–ö–ê–õ–ê", "–ó–ê–ü–ò–°–¨ –ü–û–î–ö–ê–°–¢–ê"]:
        kb.add(InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="book_time"))
    kb.add(
        InlineKeyboardButton("–°–≤—è–∑—å", callback_data="contact"),
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∞", callback_data="payment"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="services")
    )
    await bot.send_message(callback_query.from_user.id, info, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'back_to_main')
async def back_to_main(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
